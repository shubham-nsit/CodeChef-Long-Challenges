#include <stdio.h>

void swap(long int* a, long int* b) 
{ 
    int t = *a; 
    *a = *b; 
    *b = t; 
} 
  
/* This function takes last element as pivot, places 
   the pivot element at its correct position in sorted 
    array, and places all smaller (smaller than pivot) 
   to left of pivot and all greater elements to right 
   of pivot */
int partition (long int arr[], long int low, long int high) 
{ 
    long int pivot = arr[high];    // pivot 
    long int i = (low - 1);  // Index of smaller element 
  
    for (long int j = low; j <= high- 1; j++) 
    { 
        // If current element is smaller than the pivot 
        if (arr[j] < pivot) 
        { 
            i++;    // increment index of smaller element 
            swap(&arr[i], &arr[j]); 
        } 
    } 
    swap(&arr[i + 1], &arr[high]); 
    return (i + 1); 
} 
  
/* The main function that implements QuickSort 
 arr[] --> Array to be sorted, 
  low  --> Starting index, 
  high  --> Ending index */
void quickSort(long int arr[], long int low, long int high) 
{ 
    if (low < high) 
    { 
        /* pi is partitioning index, arr[p] is now 
           at right place */
        int pi = partition(arr, low, high); 
  
        // Separately sort elements before 
        // partition and after partition 
        quickSort(arr, low, pi - 1); 
        quickSort(arr, pi + 1, high); 
    } 
} 
  
/* Function to print an array */
void printArray(long int arr[], long int size) 
{ 
    long int i; 
    for (i=0; i < size; i++) 
        printf("%ld ", arr[i]); 
} 
  
// Driver program to test above functions 
int main() 
{ 
    long int t;
    scanf("%ld",&t);
    while(t--)
    {
        long int N,i,j,k;
        scanf("%ld",&N);
        long int arr[N],repeat[N],nonrepeat[N];
        for(i=0;i<N;i++)
        {
            scanf("%ld",&arr[i]);
        }
        //long int arr[] = {10, 7, 8, 9, 1, 5}; 
        long int n = sizeof(arr)/sizeof(arr[0]); 
        quickSort(arr, 0, n-1); 
        //printArray(arr, n);

        if(arr[N-1]==arr[N-2])
        {
            printf("NO \n");
            continue;
        } 
        j=0,k=0;
        for(i=0;i<N;i++)
        {
            nonrepeat[j]=arr[i];
            j++;
            if(arr[i]==arr[i+1])
            {
                repeat[k]=arr[i];
                i++;
                k++;
                if(arr[i]==arr[i+1])
                {
                    break;
                }
            }
        }
        if(arr[i]==arr[i+1])
        {
            printf("NO \n");
        }
        else 
        {
            /*for(i=0;i<j;i++)
            {
                printf("%ld  ",nonrepeat[i]);
            }
            printf("\n");
            for(i=0;i<k;i++)
            {
                printf("%ld  ",repeat[i]);
            }
            printf("\n");*/
            long int ans[N];
            for(i=0;i<j;i++)
            {
                ans[i]=nonrepeat[i];
            }
            long int g=0;
            for(i=j;i<N;i++)
            {
                ans[i]=repeat[k-1];
                k--;
            }
            printf("YES \n");
            for(i=0;i<N;i++)
            {
                printf("%ld ",ans[i]);
            }
            printf("\n");
        }
    }
    return 0; 
} 
